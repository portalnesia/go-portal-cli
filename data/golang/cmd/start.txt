/*
 * Copyright (c) Portalnesia - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Putu Aditya <aditya@portalnesia.com>
 */

package cmd

import (
	"context"
	"fmt"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"os"
	"os/signal"
	"portalnesia/internal/config"
	"portalnesia/internal/server"
	"portalnesia/pkg/discord"
	"portalnesia/pkg/rabbitmq"
	"portalnesia/pkg/telegram"
	"portalnesia/pkg/whatsapp"
	"syscall"
)

// startCmd represents the start command
var startCmd = &cobra.Command{
	Use:   "start",
	Short: "A brief description of your command",
    Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		app := *appConfig
		app.DB = true
		app.Redis = true
		app.RabbitMQ = true
		app.Firebase = true
		//app.Mongo = true
		app.Minio = true

		apps := config.New(app)
		defer apps.Close()

		fiberApp := server.New(apps)
		defer fiberApp.Close()

		ports := viper.GetIntSlice("ports")
		for _, port := range ports {
			go func() {
				apps.Log.Info("system").Msgf("Starting server on port %d", port)
				if err := fiberApp.Fiber.Listen(fmt.Sprintf("127.0.0.1:%d", port)); err != nil {
					apps.Log.Error(err, "system").Msgf("Portalnesia API Server is error when running on port %d", port)
				}
			}()
		}

		signKill := make(chan os.Signal, 1)
		signal.Notify(signKill, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

		ctx, cancel := context.WithCancel(context.Background())

		//github.NewGithub(apps)

		if apps.Env.IsProduction {
			wa := whatsapp.New(apps)
			defer wa.Disconnect()
		}

		telegram.New(apps)

		discord.New(apps)
		defer discord.Close()

		//var cr *cron.Cron
		//if apps.Env.IsDev {
		//	cr = cron.New(apps)
		//	defer cr.Stop()
		//}

		go rabbitmq.NewClient(ctx, apps)

		<-signKill

		fmt.Print("\n\n=========================================\n\n")

		cancel()
	},
}
