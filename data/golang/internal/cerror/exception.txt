/*
 * Copyright (c) Portalnesia - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Putu Aditya <aditya@portalnesia.com>
 */

package cerror

import (
	"bufio"
	"bytes"
	"errors"
	"fmt"
	"gorm.io/gorm"
	"os"
	"runtime"
	"strings"
	"testing"
)

type Reason struct {
	Error  any    `json:"error"`
	String string `json:"string"`
}

type Error struct {
	// HTTP Status
	Status      int     `json:"-"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Code        int     `json:"code,omitempty"`
	Reason      *Reason `json:"reason,omitempty"`
	stack       []uintptr
	frames      []StackFrame

	Data any `json:"-"`
}

func (e Error) Error() string {
	msg := e.Description
	if e.Reason != nil {
		msg += fmt.Sprintf(" (%s)", e.Reason.String)
	}
	return msg
}

func NewError(status int, code int, message string, description string, reason ...error) *Error {
	stack := make([]uintptr, 3)
	length := runtime.Callers(2, stack[:])

	err := &Error{
		Status:      status,
		Code:        code,
		Name:        message,
		Description: description,
		stack:       stack[:length],
	}
	if len(reason) == 1 && reason[0] != nil {
		err.Reason = &Reason{
			Error:  reason[0],
			String: reason[0].Error(),
		}
	}

	return err
}

func newOauthError(status int, code int, message string, description string, reason ...error) *Error {
	err := NewError(status, code, message, description, reason...)
	return err
}

// A StackFrame contains all necessary information about to generate a line
// in a callstack.
type StackFrame struct {
	// The path to the file containing this ProgramCounter
	File string
	// The LineNumber in that file
	LineNumber int
	// The Name of the function that contains this ProgramCounter
	Name string
	// The Package that contains this function
	Package string
	// The underlying ProgramCounter
	ProgramCounter uintptr
}

// newStackFrame popoulates a stack frame object from the program counter.
func newStackFrame(pc uintptr) (frame StackFrame) {

	frame = StackFrame{ProgramCounter: pc}
	if frame.Func() == nil {
		return
	}
	frame.Package, frame.Name = packageAndName(frame.Func())

	// pc -1 because the program counters we use are usually return addresses,
	// and we want to show the line that corresponds to the function call
	frame.File, frame.LineNumber = frame.Func().FileLine(pc - 1)
	return

}

// Func returns the function that contained this frame.
func (frame *StackFrame) Func() *runtime.Func {
	if frame.ProgramCounter == 0 {
		return nil
	}
	return runtime.FuncForPC(frame.ProgramCounter)
}

// String returns the stackframe formatted in the same way as go does
// in runtime/debug.Stack()
func (frame *StackFrame) String() string {
	str := fmt.Sprintf("%s:%d (0x%x)\n", frame.File, frame.LineNumber, frame.ProgramCounter)

	source, err := frame.sourceLine()
	if err != nil {
		return str
	}

	return str + fmt.Sprintf("\t%s: %s\n", frame.Name, source)
}

// SourceLine gets the line of code (from File and Line) of the original source if possible.
func (frame *StackFrame) SourceLine() (string, error) {
	source, err := frame.sourceLine()
	if err != nil {
		return source, NewError(503, ErrorServer, "Something went wrong", err.Error(), err)
	}
	return source, err
}

func (frame *StackFrame) sourceLine() (string, error) {
	if frame.LineNumber <= 0 {
		return "???", nil
	}

	file, err := os.Open(frame.File)
	if err != nil {
		return "", err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	currentLine := 1
	for scanner.Scan() {
		if currentLine == frame.LineNumber {
			return string(bytes.Trim(scanner.Bytes(), " \t")), nil
		}
		currentLine++
	}
	if err := scanner.Err(); err != nil {
		return "", err
	}

	return "???", nil
}

func packageAndName(fn *runtime.Func) (string, string) {
	name := fn.Name()
	pkg := ""

	// The name includes the path name to the package, which is unnecessary
	// since the file name is already included.  Plus, it has center dots.
	// That is, we see
	//  runtime/debug.*T·ptrmethod
	// and want
	//  *T.ptrmethod
	// Since the package path might contains dots (e.g. code.google.com/...),
	// we first remove the path prefix if there is one.
	if lastslash := strings.LastIndex(name, "/"); lastslash >= 0 {
		pkg += name[:lastslash] + "/"
		name = name[lastslash+1:]
	}
	if period := strings.Index(name, "."); period >= 0 {
		pkg += name[:period]
		name = name[period+1:]
	}

	name = strings.Replace(name, "·", ".", -1)
	return pkg, name
}

// getStack returns the callstack formatted the same way that go does
// in runtime/debug.Stack()
func (e Error) getStack() []byte {
	buf := bytes.Buffer{}

	for _, frame := range e.stackFrames() {
		buf.WriteString(frame.String())
	}

	return buf.Bytes()
}

// Callers satisfies the bugsnag ErrorWithCallerS() interface
// so that the stack can be read out.
func (e Error) Callers() []uintptr {
	return e.stack
}

// ErrorStack returns a string that contains both the
// error message and the callstack.
func (e Error) ErrorStack() string {
	return e.Error() + "\n" + string(e.getStack())
}

// stackFrames returns an array of frames containing information about the
// stack.
func (e Error) stackFrames() []StackFrame {
	if e.frames == nil {
		e.frames = make([]StackFrame, len(e.stack))

		for i, pc := range e.stack {
			e.frames[i] = newStackFrame(pc)
		}
	}

	return e.frames
}

func IsName(err error, name string) bool {
	var er *Error
	if errors.As(err, &er) {
		return er.Name == name
	}
	return false
}

func IsCode(err error, code int) bool {
	var er *Error
	if errors.As(err, &er) {
		return er.Code == code
	}
	//if errors.Is(err, gorm.ErrRecordNotFound) {
	//	return code == ErrorNotfound
	//}
	return false
}

func IsError(err error) (*Error, bool) {
	var er *Error
	if errors.As(err, &er) {
		return er, true
	}
	return nil, false
}

func IsNotFound(err error) bool {
	if errors.Is(err, gorm.ErrRecordNotFound) {
		return true
	}
	return IsCode(err, ErrorNotfound)
}

// TestSameError is to assert is error same
func TestSameError(t *testing.T, expectedErr error, actualErr error) bool {
	var (
		ok       bool
		expected *Error
		actual   *Error
	)

	if expectedErr == nil && actualErr == nil {
		return true
	}
	nextMsg := fmt.Sprintf("expected: %+v\nactual: %+v", expectedErr, actualErr)

	if expectedErr == nil && actualErr != nil || actualErr == nil && expectedErr != nil {
		t.Errorf("Expected error is not of type *Error:\n%s", nextMsg)
		return false
	}

	expected, ok = IsError(expectedErr)
	if !ok {
		t.Errorf("Expected error is not of type *Error:\n%s", nextMsg)
		return false
	}

	actual, ok = IsError(actualErr)
	if !ok {
		t.Errorf("Actual error is not of type *Error:\n%s", nextMsg)
		return false
	}

	if actual.Error() != expected.Error() {
		t.Errorf("Not equal:\n%s", nextMsg)
		return false
	}
	return true
}

func HelperNotFound(err error, tipe string, id interface{}, idNameArg ...string) *Error {
	if IsNotFound(err) {
		return NotFound(tipe, id, idNameArg...)
	} else {
		return Server(err)
	}
}
