/*
 * Copyright (c) Portalnesia - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Putu Aditya <aditya@portalnesia.com>
 */

package repository

import (
	"APP_NAME/internal/request"
)

type DataModel interface {
	GetAvailableOrder() [][]string
	GetDefaultOrder() []string // [sort,order]
	TableName() string
}

type CrudRepository[Model DataModel, TypeID any, Filter request.RequestInterface] interface {
	FindOne(ctx ContextInterface, query Filter, id TypeID, opts ...Options) (resp *Model, err error)
	FindAll(ctx ContextInterface, query Filter, opts ...Options) (resp []Model, err error)
	Create(ctx ContextInterface, query Filter, data *Model, opts ...Options) (err error)
	Update(ctx ContextInterface, query Filter, data *Model, opts ...Options) (err error)
	Delete(ctx ContextInterface, query Filter, id TypeID, opts ...Options) (err error)
	Count(ctx ContextInterface, opts ...Options) (total int64, err error)
	ManualFirst(ctx ContextInterface, opts ...Options) (resp *Model, err error)
}

type crudRepository[Model DataModel, TypeID any, Filter request.RequestInterface] struct {
	base
}

func (r crudRepository[Model, TypeID, Filter]) FindOne(ctx ContextInterface, _ Filter, id TypeID, opts ...Options) (resp *Model, err error) {
	db := r.getDatabase(ctx, opts...)

	if err = db.Where("id = ?", id).First(&resp).Error; err != nil {
		return nil, err
	}

	return
}

func (r crudRepository[Model, TypeID, Filter]) FindAll(ctx ContextInterface, query Filter, opts ...Options) (resp []Model, err error) {
	var tmp Model
	db := r.getDatabase(ctx, opts...).Model(tmp)

	var total int64
	db.Model(&tmp).Count(&total)
	query.SetTotal(total)

	if err = db.Scopes(query.ListHelper(tmp.GetDefaultOrder(), tmp.GetAvailableOrder(), tmp.TableName())).Find(&resp).Error; err != nil {
		return nil, err
	}

	if query.GetPage() == 0 {
		lenData := len(resp)
		if lenData > 0 {
			cursorResponse, _ := request.ExtractValuesByColumns(&resp[lenData-1], query.GetOrder())
			query.SetCursorResponse(cursorResponse)
		}
	}

	if len(resp) == 0 {
		resp = make([]Model, 0)
	}

	return
}

func (r crudRepository[Model, TypeID, Filter]) Create(ctx ContextInterface, _ Filter, data *Model, opts ...Options) (err error) {
	db := r.getDatabase(ctx, opts...)

	return db.Create(&data).Error
}

func (r crudRepository[Model, TypeID, Filter]) Update(ctx ContextInterface, _ Filter, data *Model, opts ...Options) (err error) {
	db := r.getDatabase(ctx, opts...)

	return db.Save(&data).Error
}

func (r crudRepository[Model, TypeID, Filter]) Delete(ctx ContextInterface, _ Filter, id TypeID, opts ...Options) (err error) {
	var tmp Model
	db := r.getDatabase(ctx, opts...)

	return db.Where("id = ?", id).Delete(&tmp).Error
}

func (r crudRepository[Model, TypeID, Filter]) Count(ctx ContextInterface, opts ...Options) (total int64, err error) {
	var tmp Model
	err = r.getDatabase(ctx, opts...).Model(&tmp).Count(&total).Error
	return
}

func (r crudRepository[Model, TypeID, Filter]) ManualFirst(ctx ContextInterface, opts ...Options) (resp *Model, err error) {
	var tmp Model
	err = r.getDatabase(ctx, opts...).Model(&tmp).First(&resp).Error
	return
}
